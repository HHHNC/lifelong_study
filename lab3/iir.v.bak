module iir (
    input clk,        // 时钟信号
    input reset,      // 复位信号
    input signed [15:0] x, // 输入信号，16位有符号整数
    output reg signed [15:0] y // 输出信号，16位有符号整数
);

// 初始化状态
reg signed [15:0] x_reg [0:6]; // 输入延迟线
reg signed [15:0] y_reg [0:6]; // 输出延迟线

// 滤波器系数
parameter signed [15:0] B [0:6] = {16'd18, -16'd91, 16'd207, -16'd265, 16'd207, -16'd91, 16'd18};
parameter signed [15:0] A [0:6] = {16'd32768, -16'd18486, 16'd43780, -16'd55371, 16'd39726, -16'd15229, 16'd2440};

// 状态更新
always @(posedge clk or posedge reset) begin
    if (reset) begin
        // 复位状态
        for (i = 0; i <= 6; i = i + 1) begin
            x_reg[i] <= 0;
            y_reg[i] <= 0;
        end
    end else begin
        // 更新输入延迟线
        for (i = 6; i >= 1; i = i - 1) begin
            x_reg[i] <= x_reg[i-1];
        end
        x_reg[0] <= x;

        // 更新输出延迟线
        for (i = 6; i >= 1; i = i - 1) begin
            y_reg[i] <= y_reg[i-1];
        end
    end
end

// 滤波器计算
always @* begin
    y = 0;
    for (i = 0; i <= 6; i = i + 1) begin
        y = y + B[i] * x_reg[i];
        if (i != 0) begin
            y = y - A[i] * y_reg[i];
        end
    end
end

endmodule
